import java.time.LocalDate;
import java.util.ArrayList;
import java.util.Collections;
import java.util.Scanner;

class Aluno {
    private String nome;
    private LocalDate dataNascimento;

    public Aluno(String nome, String cpf, String endereco, LocalDate dataNascimento) {
        this.nome = nome;
        this.dataNascimento = dataNascimento;
    }

    public String getNome() {
        return nome;
    }

    public int getIdade() {
        LocalDate hoje = LocalDate.now();
        return hoje.minusYears(dataNascimento.getYear()).getYear();
    }
}

class Turma {
    private String codigo;
    private int limiteVagas;
    private ArrayList<Aluno> alunosMatriculados;

    public Turma(String codigo, String etapaEnsino, int ano, int limiteVagas) {
        this.codigo = codigo;
        this.limiteVagas = limiteVagas;
        this.alunosMatriculados = new ArrayList<>();
    }

    public String getCodigo() {
        return codigo;
    }

    public void matricularAluno(Aluno aluno) {
        if (alunosMatriculados.size() < limiteVagas) {
            alunosMatriculados.add(aluno);
            System.out.println("Aluno matriculado com sucesso na turma " + codigo);
        } else {
            System.out.println("Não há vagas disponíveis nesta turma.");
        }
    }

    public void listarAlunosMatriculados() {
        System.out.println("Alunos matriculados na turma " + codigo + ":");
        for (Aluno aluno : alunosMatriculados) {
            System.out.println(aluno.getNome());
        }
    }

    public String getEtapaEnsino() {
        throw new UnsupportedOperationException("Unimplemented method 'getEtapaEnsino'");
    }

    public String getAno() {
        
        throw new UnsupportedOperationException("Unimplemented method 'getAno'");
    }

   
}

class ListaDeAlunos {
    private ArrayList<Aluno> alunos;

    public ListaDeAlunos() {
        this.alunos = new ArrayList<>();
    }

    public void incluirNoInicio(Aluno aluno) {
        alunos.add(0, aluno);
    }

    public void incluirNoFim(Aluno aluno) {
        alunos.add(aluno);
    }

    public void ordenar() {
        Collections.sort(alunos, (a1, a2) -> a1.getNome().compareTo(a2.getNome()));
    }

    public Aluno removerDoFim() {
        if (!alunos.isEmpty()) {
            return alunos.remove(alunos.size() - 1);
        } else {
            return null;
        }
    }

    public int tamanho() {
        return alunos.size();
    }

    public Aluno get(int index) {
        if (index >= 0 && index < alunos.size()) {
            return alunos.get(index);
        } else {
            return null;
        }
    }
}

public class escola {
    public static void main(String[] args) {
        @SuppressWarnings("resource")
        Scanner scanner = new Scanner(System.in);
        ListaDeAlunos listaDeAlunos = new ListaDeAlunos();
        ArrayList<Turma> turmas = new ArrayList<>();

        while (true) {
            System.out.println("\nMenu:");
            System.out.println("1. Cadastrar Aluno");
            System.out.println("2. Cadastrar Turma");
            System.out.println("3. Matricular Aluno em Turma");
            System.out.println("4. Listar Alunos por Nome e Idade");
            System.out.println("5. Listar Turmas Cadastradas");
            System.out.println("6. Listar Alunos Matriculados em uma Turma");
            System.out.println("7. Listar Alunos fora da faixa etária por Etapa de Ensino");
            System.out.println("8. Sair");
            System.out.print("Escolha uma opção: ");
            int opcao = scanner.nextInt();
            scanner.nextLine(); // Consumir a quebra de linha

            switch (opcao) {
                case 1:
                    // Cadastrar Aluno
                    System.out.print("Nome do aluno: ");
                    String nomeAluno = scanner.nextLine();
                    System.out.print("CPF do aluno: ");
                    String cpfAluno = scanner.nextLine();
                    System.out.print("Endereço do aluno: ");
                    String enderecoAluno = scanner.nextLine();
                    System.out.print("Data de Nascimento do aluno (AAAA-MM-DD): ");
                    String dataNascimentoAlunoStr = scanner.nextLine();
                    LocalDate dataNascimentoAluno = LocalDate.parse(dataNascimentoAlunoStr);
                    Aluno aluno = new Aluno(nomeAluno, cpfAluno, enderecoAluno, dataNascimentoAluno);
                    listaDeAlunos.incluirNoFim(aluno);
                    System.out.println("Aluno cadastrado com sucesso!");
                    break;

                case 2:
                   
                    System.out.print("Código da turma: ");
                    String codigoTurma = scanner.nextLine();
                    System.out.print("Etapa de ensino (infantil, fundamental, médio): ");
                    String etapaEnsino = scanner.nextLine();
                    System.out.print("Ano da turma: ");
                    int anoTurma = scanner.nextInt();
                    System.out.print("Limite de vagas da turma: ");
                    int limiteVagas = scanner.nextInt();
                    scanner.nextLine(); // Consumir a quebra de linha
                    Turma turma = new Turma(codigoTurma, etapaEnsino, anoTurma, limiteVagas);
                    turmas.add(turma);
                    System.out.println("Turma cadastrada com sucesso!");
                    break;

                case 3:
                   
                    System.out.print("Nome do aluno: ");
                    String nomeAlunoMatricula = scanner.nextLine();
                    System.out.print("Código da turma: ");
                    String codigoTurmaMatricula = scanner.nextLine();
                    Aluno alunoMatricula = null;
                    for (int i = 0; i < listaDeAlunos.tamanho(); i++) {
                        if (listaDeAlunos.get(i).getNome().equals(nomeAlunoMatricula)) {
                            alunoMatricula = listaDeAlunos.get(i);
                            break;
                        }
                    }
                    if (alunoMatricula != null) {
                        for (Turma t : turmas) {
                            if (t.getCodigo().equals(codigoTurmaMatricula)) {
                                t.matricularAluno(alunoMatricula);
                                break;
                            }
                        }
                    } else {
                        System.out.println("Aluno não encontrado.");
                    }
                    break;

                case 4:
                    
                    listaDeAlunos.ordenar();
                    System.out.println("Alunos cadastrados:");
                    for (int i = 0; i < listaDeAlunos.tamanho(); i++) {
                        Aluno a = listaDeAlunos.get(i);
                        System.out.println(a.getNome() + " - Idade: " + a.getIdade());
                    }
                    break;

                case 5:
                    
                    System.out.println("Turmas cadastradas:");
                    for (Turma t : turmas) {
                        System.out.println("Código: " + t.getCodigo() + ", Etapa de Ensino: " + t.getEtapaEnsino()
                                + ", Ano: " + t.getAno());
                    }
                    break;

                case 6:
                    
                    System.out.print("Código da turma: ");
                    String codigoTurmaConsulta = scanner.nextLine();
                    for (Turma t : turmas) {
                        if (t.getCodigo().equals(codigoTurmaConsulta)) {
                            t.listarAlunosMatriculados();
                            break;
                        }
                    }
                    break;

                case 7:
                    
                    System.out.print("Etapa de ensino (infantil, fundamental, médio): ");
                    String etapaEnsinoConsulta = scanner.nextLine();
                    int idadeMinima = 0;
                    int idadeMaxima = 0;
                    switch (etapaEnsinoConsulta) {
                        case "infantil":
                            idadeMaxima = 5;
                            break;
                        case "fundamental":
                            idadeMinima = 6;
                            idadeMaxima = 15;
                            break;
                        case "médio":
                            idadeMinima = 15;
                            idadeMaxima = 18;
                            break;
                    }
                    System.out
                            .println("Alunos fora da faixa etária para a etapa de ensino " + etapaEnsinoConsulta + ":");
                    for (int i = 0; i < listaDeAlunos.tamanho(); i++) {
                        Aluno a = listaDeAlunos.get(i);
                        int idade = a.getIdade();
                        if (idade < idadeMinima || idade > idadeMaxima) {
                            System.out.println(a.getNome() + " - Idade: " + idade);
                        }
                    }
                    break;

                case 8:
                   
                    System.out.println("Encerrando o programa...");
                    System.exit(0);
                    break;

                default:
                    System.out.println("Opção inválida.");
            }
        }
    }
}
